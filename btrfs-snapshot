#!/bin/bash
#
# btrfs-snapshot - tool for creating btrfs snapshots
#

declare -r version=VERSION

_f_parseopts=parseopts

usage() {
    cat <<EOF
btrfs-snapshot $version
usage: ${0##*/} [options]

  Options:
   -s, --subvolume <subvolume>      Set subvolume for creating snapshot (default: /)
   -r, --readonly                   Create a readonly snapshot (default: no)
   -n, --nkeep <number>             Limit number of snapshots to keep (default: no)
   -p, --prefix <prefix>            Set prefix of snapshot dir (default: /snapshot)
   -h, --help                       Display this message and exit
   -v, --version                    Display version information and exit

EOF
}

version() {
    cat <<EOF
btrfs-snapshot $version
EOF
}

set_var() {
    prefix=/snapshot
    subvol=/
    _date=$(date -I)
}

set_and_check_snap() {
    if [[ $subvol = / ]]; then
        dest=$prefix/root
    else
        dest=$prefix/$subvol
    fi
    mkdir -p "$dest"
    snapshot=$dest/$_date
    if [[ -d $snapshot ]]; then
        echo "${0##*/}: invalid command -- snapshot already exists"
        exit 1
    fi
}

create_snap() {
    if [[ $ro = true ]]; then
        btrfs subvolume snapshot -r "$subvol" "$snapshot"
    else
        btrfs subvolume snapshot "$subvol" "$snapshot"
    fi
}

delete_snap() {
    local _ndel=$(( $(ls "$dest" | wc -l) - nkeep ))
    (( _ndel > 0 )) && {
        local _snapshot=()
        mapfile -t _snapshot < <(ls -d "$dest"/* | head -n $_ndel)
        btrfs subvolume delete "${_snapshot[@]}"
    }
}

. "$_f_parseopts"

trap 'exit 130' INT
trap 'exit 143' TERM

_opt_short='s:rn:p:hv'
_opt_long=('subvolume:' 'readonly' 'nkeep:' 'prefix:' 'help' 'version')

parseopts "$_opt_short" "${_opt_long[@]}" -- "$@" || exit 1
set -- "${OPTRET[@]}"
unset _opt_short _opt_long OPTRET

set_var

while :; do
    case $1 in
        -s|--subvolume)
            shift
            subvol=$1
            ;;
        -r|--readonly)
            ro=true
            ;;
        -n|--nkeep)
            shift
            nkeep=$1
            ;;
        -p|--prefix)
            shift
            prefix=$1
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -v|--version)
            version
            exit 0
            ;;
        --)
            shift
            break 2
            ;;
    esac
    shift
done

set_and_check_snap
create_snap

if [[ $nkeep ]]; then
    delete_snap
fi

exit

# vim: set ft=sh ts=4 sw=4 et:
