#!/bin/bash
#
# btrfs-snapshot - tool for creating btrfs snapshots
#

declare -r version=%VERSION%

_f_functions=functions
_d_configs=btrfs-snapshot

_optsubvol='' _optdest=''
_optnkeep=0 _optforce=0 _optwritable=0
_optcolor=1
_optconfig=()

usage() {
    cat <<EOF
btrfs-snapshot $version
usage: ${0##*/} [options]

  Options:
   -c, --config <config>            Use specified config file in /etc/btrfs-snapshot
   -C, --allconfigs                 Process all config files in /etc/btrfs-snapshot
   -s, --subvol <path>              Path to subvolume
   -d, --dest <dir>                 Destination for snapshot
   -n, --nkeep <number>             Number of snapshots to keep, 0 for unlimited (default: 0)
   -f, --force                      Force recreate when a snapshot already exists
   -w, --writable                   Create a writable snapshot (default: no)
   -h, --help                       Display this message and exit
   -V, --version                    Display version information and exit
   -N, --nocolor                    Disable colorized output messages

EOF
}

version() {
    cat <<EOF
btrfs-snapshot $version
EOF
}

create_snapshot() {
    if (( _optwritable )); then
        msg "$(btrfs subvolume snapshot "$_optsubvol" "$SNAPSHOT")"
    else
        msg "$(btrfs subvolume snapshot -r "$_optsubvol" "$SNAPSHOT")"
    fi
}

process_nkeep() (
    set -e
    local optdest=$1 optnkeep=$2
    cd "$optdest"
    LC_ALL=C SNAPSHOTS=(*)
    local -i NDEL=$(( ${#SNAPSHOTS[@]} - optnkeep ))
    if (( NDEL > 0 )); then
        local -a SNAPSHOT_DEL
        mapfile -t SNAPSHOT_DEL <<< "${SNAPSHOTS[@]:0:$NDEL}"
        msg "$(btrfs subvolume delete "${SNAPSHOT_DEL[@]}")"
    fi
)

process_config() (
    local config=$1
    local -a config_opts

    if (( BTRSNP_PROCESS_CONFIG )); then
        die "You appear to be calling a config from a config. This is a configuration error."
    fi

    if [[ $config != */* ]]; then
        printf -v config '%s/%s.conf' "$_d_configs" "$config"
    fi

    . "$config" || die "Failed to load config: \`%s'" "$config"

    (( _optforce )) && config_opts+=(-f)
    (( _optcolor )) || config_opts+=(-N)

    msg "Creating snapshot from config: $config"

    if [[ $SUBVOL ]]; then
        config_opts+=(-s "$SUBVOL")
    else
        warning "No subvolume specified. Skipping config \`%s'" "$config"
        exit
    fi

    if [[ $DEST ]]; then
        config_opts+=(-d "$DEST")
    else
        warning "No destination specified. Skipping config \`%s'" "$config"
        exit
    fi

    (( NKEEP > 0 )) && config_opts+=(-n "$NKEEP")
    (( WRITEABLE )) && config_opts+=(-w)

    msg2 "${config_opts[*]}"
    if BTRSNP_PROCESS_CONFIG=1 "$0" "${config_opts[@]}"; then
        exit 0
    else
        exit 1
    fi
)

. "$_f_functions"

trap 'exit 130' INT
trap 'exit 143' TERM

_opt_short='c:Cs:d:n:fwhVN'
_opt_long=('config:' 'allconfigs' 'subvol:' 'dest:' 'nkeep:'
           'force' 'writable' 'help' 'version' 'nocolor')

parseopts "$_opt_short" "${_opt_long[@]}" -- "$@" || exit 1
set -- "${OPTRET[@]}"
unset _opt_short _opt_long OPTRET

while :; do
    case $1 in
        -c|--config)
            shift
            _optconfig+=("$1")
            ;;
        -C|--allconfigs)
            _optconfig=("$_d_configs"/*.conf)
            [[ -f ${_optconfig[0]} ]] || die "No config files found in $_d_configs"
            ;;
        -s|--subvol)
            shift
            _optsubvol=$1
            ;;
        -d|--dest)
            shift
            _optdest=$1
            ;;
        -n|--nkeep)
            shift
            _optnkeep=$1
            ;;
        -f|--force)
            _optforce=1
            ;;
        -w|--writable)
            _optwritable=1
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -V|--version)
            version
            exit 0
            ;;
        -N|--nocolor)
            _optcolor=0
            ;;
        --)
            shift
            break 2
            ;;
    esac
    shift
done

if [[ -t 1 ]] && (( _optcolor )); then
    try_enable_color
fi

if (( ${#_optconfig[*]} )); then
    map process_config "${_optconfig[@]}"
    exit
fi

if [[ ! $_optsubvol ]]; then
    die "No subvolume specified."
fi

if [[ ! $_optdest ]]; then
    die "No destination specified."
fi

mkdir -p "$_optdest"

SNAPSHOT=$_optdest/$(date -Iminutes)

if [[ -d $SNAPSHOT ]]; then
    if (( _optforce )); then
        msg "$(btrfs subvolume delete "$SNAPSHOT")"
    else
        die "Snapshot in \`%s' already exists" "$_optdest"
    fi
fi

create_snapshot
if (( _optnkeep > 0 )); then
    process_nkeep "$_optdest" "$_optnkeep"
fi

exit

# vim: set ft=sh ts=4 sw=4 et:
