#!/bin/bash
#
# btrfs-snapshot - tool for creating btrfs snapshots
#

declare -r filename=${0##*/} version=%VERSION%

_f_functions=functions
_d_configs=btrfs-snapshot

_optdest= _optsubvol=
_optnkeep=0 _optwritable=0
_optcolor=1
_optconfig=()

usage() {
    cat <<EOF
btrfs-snapshot $version
usage: $filename [options]

  Options:
   -c, --config <config>            Use specified config file in /etc/btrfs-snapshot
   -C, --allconfigs                 Process all config files in /etc/btrfs-snapshot
   -d, --dest <dir>                 Destination for snapshot
   -h, --help                       Display this message and exit
   -n, --nkeep <number>             Number of snapshots to keep, 0 for unlimited (default: 0)
   -N, --nocolor                    Disable colorized output messages
   -V, --version                    Display version information and exit
   -s, --subvol <path>              Path to subvolume
   -w, --writable                   Create a writable snapshot (default: no)

EOF
}

version() {
    cat <<EOF
btrfs-snapshot $version
EOF
}

create_snapshot() {
    if (( _optwritable )); then
        msg2 "$(btrfs subvolume snapshot "$_optsubvol" "$SNAPSHOT")"
    else
        msg2 "$(btrfs subvolume snapshot -r "$_optsubvol" "$SNAPSHOT")"
    fi
}

delete_snapshot() {
    local -i _ndel=$(( $(ls "$_optdest" | wc -l) - _optnkeep ))
    if (( _ndel > 0 )); then
        local _snapshot=()
        mapfile -t _snapshot < <(ls -d "$_optdest"/* | head -n $_ndel)
        msg2 "$(btrfs subvolume delete "${_snapshot[@]}")"
    fi
}

process_config() (
    local config=$1
    local -a config_ctopts config_cmd

    if (( BTRSNP_PROCESS_CONFIG )); then
        die "You appear to be calling a config from a config. This is a configuration error."
    fi

    if [[ $config != */* ]]; then
        printf -v config '%s/%s.conf' "$_d_configs" "$config"
    fi

    . "$config" || die "Failed to load config: \`%s'" "$config"

    (( _optcolor )) || config_ctopts+=(-N)

    ret=0
    msg "Creating snapshot from config: $config"
    config_cmd=("${config_ctopts[@]}")

    if [[ $SUBVOL ]]; then
        config_cmd+=(-s "$SUBVOL")
    else
        warning "No subvolume specified. Skipping config \`%s'" "$config"
        exit
    fi

    if [[ $DEST ]]; then
        config_cmd+=(-d "$DEST")
    else
        warning "No destination specified. Skipping config \`%s'" "$config"
        exit
    fi

    (( NKEEP > 0 )) && config_cmd+=(-n "$NKEEP")
    
    (( WRITEABLE )) && config_cmd+=(-w)

    msg2 "${config_cmd[*]}"
    BTRSNP_PROCESS_CONFIG=1 "$0" "${config_cmd[@]}"
    (( $? )) && ret=1

    exit $ret
)

. "$_f_functions"

trap 'exit 130' INT
trap 'exit 143' TERM

_opt_short='c:Cd:hn:NVs:w'
_opt_long=('config:' 'allconfigs' 'dest:' 'help' 'nkeep:'
           'nocolor' 'version' 'subvol:' 'writable')

parseopts "$_opt_short" "${_opt_long[@]}" -- "$@" || exit 1
set -- "${OPTRET[@]}"
unset _opt_short _opt_long OPTRET

while :; do
    case $1 in
        -c|--config)
            shift
            _optconfig+=("$1")
            ;;
        -C|--allconfigs)
            _optconfig=("$_d_configs"/*.conf)
            [[ -e ${_optconfig[0]} ]] || die "No config files found in $_d_configs"
            ;;
        -d|--dest)
            shift
            _optdest=$1
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -n|--nkeep)
            shift
            declare -i _optnkeep=$1
            ;;
        -N|--nocolor)
            _optcolor=0
            ;;
        -V|--version)
            version
            exit 0
            ;;
        -s|--subvol)
            shift
            _optsubvol=$1
            ;;
        -w|--writable)
            _optwritable=1
            ;;
        --)
            shift
            break 2
            ;;
    esac
    shift
done

if [[ -t 1 ]] && (( _optcolor )); then
    try_enable_color
fi

if (( ${#_optconfig[*]} )); then
    map process_config "${_optconfig[@]}"
    exit
fi

if [[ ! $_optsubvol ]]; then
    die "No subvolume specified."
fi

if [[ ! $_optdest ]]; then
    die "No destination specified."
fi

mkdir -p "$_optdest"

SNAPSHOT=$_optdest/$(date -I)

if [[ -d $SNAPSHOT ]]; then
    die "Snapshot in \`%s' already exists" "$_optdest"
fi

create_snapshot
if (( _optnkeep > 0 )); then
    delete_snapshot
fi

exit

# vim: set ft=sh ts=4 sw=4 et:
